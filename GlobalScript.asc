// main global script file

//=============================================================================
// INITIALIZATION
//=============================================================================

// set default game options
function set_default_options()
{
  System.Volume = 100;
  sldAudio.Value = System.Volume;
  sldSpeed.Value = 40;
  SetGameSpeed(40);

  if (IsSpeechVoxAvailable())
  {
     Speech.VoiceMode = eSpeechVoiceAndText;
     btnVoice.Text = "Voice and Text";
     sldVoice.Value = 255;
     SetSpeechVolume(255);
  }

  if (System.SupportsGammaControl)
  {
    System.Gamma = 100;
    sldGamma.Value = 100;
  }
}

// initialize gPanel
function initialize_control_panel()
{
  if (!IsSpeechVoxAvailable())
  {
    // hide the speech controls, if speech is not available
    lblVoice.Visible = false;
    btnVoice.Visible = false;
    sldVoice.Visible = false;
  }

  if (!System.SupportsGammaControl) {
    // hide the gamma control, if not supported
    sldGamma.Visible = false;
    lblGamma.Visible = false;
  }

  set_default_options();
}

// called when the game starts, before the first room is loaded
function game_start()
{
  // initialize gPanel controls
  initialize_control_panel();

  // set KeyboardMovement movement mode
  KeyboardMovement.Mode = eKeyboardMovementModeTapping;

  // set KeyboardMovement keys
  //KeyboardMovement.KeyUp = eKeyW;
  //KeyboardMovement.KeyDown = eKeyS;
  //KeyboardMovement.KeyLeft = eKeyA;
  //KeyboardMovement.KeyRight = eKeyD;

  // Auto-save on the save slot 999
  SetRestartPoint();
}

//=============================================================================
// Common GUI functions
//=============================================================================

// hide the icon bar and show a GUI
function open_gui(GUI* gui_to_open)
{
  if (gui_to_open != gInventory)
  {
    lblOverHotspot.Visible = false;
  }

  gIconbar.Visible = false;
  mouse.UseModeGraphic(eModePointer);
  gui_to_open.Visible = true;
}

// hide the GUI and show the icon bar
function close_gui(GUI* gui_to_close)
{
  gui_to_close.Visible = false;
  mouse.UseDefaultGraphic();
  lblOverHotspot.Visible = true;
  gIconbar.Visible = true;
}

// hide a GUI, based on a GUI control
function close_owning_gui(GUIControl* control)
{
  close_gui(control.OwningGUI);
}

// hide a GUI directly from an OnClick event
function close_gui_onclick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
}

function show_inventory_window()
{
  mouse.Mode = eModeInteract;
  open_gui(gInventory);
}

function show_save_game_dialog()
{
  // get the list of save games
  lstSaveGamesList.FillSaveGameList();

  if (lstSaveGamesList.ItemCount > 0)
  {
    // if there is at least one, set the default text
    // to be the first game's name
    txtNewSaveName.Text = lstSaveGamesList.Items[0];
  }
  else
  {
    // no save games yet, so default to empty text
    txtNewSaveName.Text = "";
  }

  open_gui(gSaveGame);
}

function show_restore_game_dialog()
{
  lstRestoreGamesList.FillSaveGameList();
  open_gui(gRestoreGame);
}

//=============================================================================
// ICONBAR
//=============================================================================

function btnIconSave_Click(GUIControl *control, MouseButton button)
{
  show_save_game_dialog();
}

function btnIconLoad_Click(GUIControl *control, MouseButton button)
{
  show_restore_game_dialog();
}

function btnIconPanel_Click(GUIControl *control, MouseButton button)
{
  open_gui(gPanel);
}

function btnIconExit_Click(GUIControl *control, MouseButton button)
{
  open_gui(gExitGame);
}

//=============================================================================
// INVENTORY WINDOW
//=============================================================================

function btnInvUp_Click(GUIControl *control, MouseButton button)
{
  invCustom.ScrollUp();
}

function btnInvDown_Click(GUIControl *control, MouseButton button)
{
  invCustom.ScrollDown();
}

function btnInvSelect_Click(GUIControl *control, MouseButton button)
{
  // switch to the interact cursor
  mouse.Mode = eModeInteract;
  // ...but override the appearance to look like the arrow
  mouse.UseModeGraphic(eModePointer);
}

function btnIconInv_Click(GUIControl *control, MouseButton button)
{
  show_inventory_window();
}

function btnIconCurInv_Click(GUIControl *control, MouseButton button)
{
  if (player.ActiveInventory != null)
  {
    mouse.Mode = eModeUseinv;
  }
}

//=============================================================================
// CONTROL PANEL
//=============================================================================

function btnSave_OnClick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
  Wait(1);
  btnIconSave_Click(btnIconSave, eMouseLeft);
}

function btnAbout_OnClick(GUIControl *control, MouseButton button)
{
  Display("%s\nAGS %s", Game.Name, System.Version);
}

function btnQuit_OnClick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
  open_gui(gExitGame);
}

function btnLoad_OnClick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
  Wait(1);
  btnIconLoad_Click(btnIconLoad, eMouseLeft);
}

function sldAudio_OnChange(GUIControl *control)
{
  System.Volume = sldAudio.Value;
}

function sldVoice_OnChange(GUIControl *control)
{
  SetSpeechVolume(sldVoice.Value);
}

function btnVoice_OnClick(GUIControl *control, MouseButton button)
{
  if (Speech.VoiceMode == eSpeechVoiceAndText)
  {
    Speech.VoiceMode = eSpeechVoiceOnly;
    btnVoice.Text = "Voice only";
  }
  else if (Speech.VoiceMode == eSpeechVoiceOnly)
  {
    Speech.VoiceMode = eSpeechTextOnly;
    btnVoice.Text = "Text only";
  }
  else if (Speech.VoiceMode == eSpeechTextOnly)
  {
    Speech.VoiceMode = eSpeechVoiceAndText;
    btnVoice.Text = "Voice and Text";
  }
}

function sldGamma_OnChange(GUIControl *control)
{
  System.Gamma = sldGamma.Value;
}

function btnDefault_OnClick(GUIControl *control, MouseButton button)
{
  set_default_options();
}

function sldSpeed_OnChange(GUIControl *control)
{
  SetGameSpeed(sldSpeed.Value);
}

//=============================================================================
// SAVE / LOAD DIALOGS
//=============================================================================

int find_save_slot(String name)
{
  bool slots[] = new bool[999];
  int slots_used = 0;

  // record which slots are occupied already, 
  // if the types save name matches any existing one, then use that
  for (int i = 0; i < lstSaveGamesList.ItemCount; i++)
  {
    if (lstSaveGamesList.Items[i] == name)
    {
      // found existing save with matching name
      return lstSaveGamesList.SaveGameSlots[i];
    }

    // remember which slots are already taken
    slots[lstSaveGamesList.SaveGameSlots[i]] = true;
    slots_used++;
  }
  
  // current version of AGS has a limit of 50 save slots
  // that may be displayed in the ListBox at the same time
  if (slots_used >= 50)
  {
    return -1;
  }

  // find first free save slot, starting with slot 1 (for "cosmetic" purposes)
  for (int i = 1; i < 999; i++)
  {
    if (!slots[i])
    {
      return i;
    }
  }

  // no free slots found
  return -1;
}

function btnSaveGame_OnClick(GUIControl *control, MouseButton button)
{
  int gameSlotToSaveInto = find_save_slot(txtNewSaveName.Text);

  if (gameSlotToSaveInto < 0)
  {
    Display("Save slots limit of 50 is reached, delete some of the existing saves first!");
  }
  else
  {
    SaveGameSlot(gameSlotToSaveInto, txtNewSaveName.Text);
    close_owning_gui(control);
  }
}

function btnRestoreGame_OnClick(GUIControl *control, MouseButton button)
{
  if (lstRestoreGamesList.SelectedIndex >= 0)
  {
    RestoreGameSlot(lstRestoreGamesList.SaveGameSlots[lstRestoreGamesList.SelectedIndex]);
  }

  close_owning_gui(control);
}

function lstSaveGamesList_OnSelectionCh(GUIControl *control)
{
  txtNewSaveName.Text = lstSaveGamesList.Items[lstSaveGamesList.SelectedIndex];
}

function txtNewSaveName_OnActivate(GUIControl *control)
{
  // pressing Return in the text box simulates clicking the save button
  btnSaveGame_OnClick(control, eMouseLeft);
}

function btnDeleteSave_OnClick(GUIControl *control, MouseButton button)
{
  if (lstSaveGamesList.SelectedIndex >= 0)
  {
    DeleteSaveSlot(lstSaveGamesList.SaveGameSlots[lstSaveGamesList.SelectedIndex]);
    lstSaveGamesList.FillSaveGameList();
  }
}

//=============================================================================
// RESTART DIALOG
//=============================================================================

function btnRestart_OnClick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
  open_gui(gRestart);
}

function btnRestartYes_OnClick(GUIControl *control, MouseButton button)
{
  RestartGame();
}

//=============================================================================
// QUIT DIALOG
//=============================================================================

function btnConfirmedQuit_OnClick(GUIControl *control, MouseButton button)
{
  QuitGame(0);
}

//=============================================================================
// PLAYER INPUT
//=============================================================================

// called when a key is pressed
function on_key_press(eKeyCode keycode, int mod)
{
  // check for Escape first, so it can be used on GUIs that pause the game
  if (keycode == eKeyEscape)
  {
    if (gInventory.Visible)
    {
      // Escape will close the restore game dialog
      close_gui(gInventory);
    }
    else if (gPanel.Visible)
    {
      // Escape will turn the panel off
      close_gui(gPanel);
    }
    else if (gSaveGame.Visible)
    {
      // Escape will close the save game dialog
      close_gui(gSaveGame);
    }
    else if (gRestoreGame.Visible)
    {
      // Escape will close the restore game dialog
      close_gui(gRestoreGame);
    }
    if (gRestart.Visible)
    {
      // Escape will cancel a restart
      close_gui(gRestart);
    }
    else if (gExitGame.Visible)
    {
      // Escape will cancel exiting the game
      close_gui(gExitGame);
    }
    else
    {
      // Escape will turn the panel on
      open_gui(gPanel);
    }
  }
  else if (IsGamePaused() || !IsInterfaceEnabled())
  {
    // game paused, so don't react to any keypresses
    keycode = 0;
  }
  else if (keycode == eKeyQ && (mod & eKeyModCtrl))
  {
    // Ctrl-Q will quit the game
    open_gui(gExitGame);
  }
  else if (keycode == eKeyF5)
  {
    // F5 will prompt to save a game
    show_save_game_dialog();
  }
  else if (keycode == eKeyF7)
  {
    // F7 will prompt to save a game
    show_restore_game_dialog();
  }
  else if (keycode == eKeyF9)
  {
    // F9 will prompt to restart the game
    open_gui(gRestart);
  }
  else if (keycode == eKeyF12)
  {
    // F12 will save a screenshot to the save game folder
    SaveScreenShot("screenshot.pcx");
  }
  else if (keycode == eKeyReturn)
  {
    if (gRestart.Visible)
    {
      // Enter confirms a restart
      RestartGame();
    }
  }
  else if (keycode == eKeyTab)
  {
    // Tab opens the inventory
    show_inventory_window();
  }
  else if (mod & eKeyModCtrl)
  {
    if (keycode == eKeyS)
    {
      // Ctrl-S will give the player all defined inventory items
      Debug(0, 0);
    }
    else if (keycode == eKeyV)
    {
      // Ctrl-V will show game engine version and build date
      Debug(1, 0);
    }
    else if (keycode == eKeyA)
    {
      // Ctrl-A will show walkable areas
      Debug(2, 3);
    }
    else if (keycode == eKeyX)
    {
      // Ctrl-X will let the player teleport to any room
      Debug(3, 0);
    }
  }
}

function handle_room_click(MouseButton button)
{
  if (button == eMouseLeft)
  {
    // left-click, so try using the current mouse cursor mode at this position
    Room.ProcessClick(mouse.x, mouse.y, mouse.Mode );
  }
  else if (button == eMouseRight || button == eMouseWheelSouth){
    // right-click or mouse wheel down will cycle the mouse cursor mode forwards
    mouse.SelectNextMode();
  }
  else if (button == eMouseMiddle)
  {
    // middle-click makes the character walk to clicked area, regardless of cursor mode
    Room.ProcessClick(mouse.x, mouse.y, eModeWalkto);
  }
  else if (button == eMouseWheelNorth)
  {
    // mouse wheel up will cycle the cursor mode backwards
    mouse.SelectPreviousMode();
  }
}

function handle_inventory_click(MouseButton button)
{
  // InventoryItem.GetAtScreenXY could return null here
  // so using game.inv_activated instead is a safer option
  InventoryItem* item = inventory[game.inv_activated];
  
  if (button == eMouseLeftInv)
  {
    if (mouse.Mode == eModeInteract)
    {
      // interact mode selects an inventory item
      player.ActiveInventory = item;
    }
    else if (mouse.Mode == eModeUseinv)
    {
      if (item.ID != player.ActiveInventory.ID)
      {
        // use one item on another
        item.RunInteraction(eModeUseinv);
      }
    }
    else
    {
      // otherwise run corresponding interaction (LookAt, etc)
      item.RunInteraction(mouse.Mode);
    }
  }
  else
  {
    // right click is always "Look At"
    item.RunInteraction(eModeLookat);
  }
}

// called when a mouse button is clicked
function on_mouse_click(MouseButton button)
{
  if (button == eMouseLeftInv || button == eMouseRightInv || button == eMouseMiddleInv)
  {
    handle_inventory_click(button);
  }
  // game is paused, then don't process mouse clicks inside the room
  else if (!IsGamePaused())
  {
    handle_room_click(button);
  }
}

//=============================================================================
// GAME EVENTS
//=============================================================================

function completed_Game(){
  if (Completed_Task == 3){
    Display("You have fixed Your ship... Your next stage will come soon");
  }  
}

// called on every game cycle, except when the game is blocked
function repeatedly_execute()
{
}

// called on every game cycle, even when the game is blocked
function repeatedly_execute_always()
{
}

// Called when a dialog script line "run-script" is processed
function dialog_request(int param)
{
}

// called when processclick wasn't handled anywhere else
function unhandled_event (int what, int type)
{
  if (what == 1) // Unhandled events for HOTSPOTS
  {
    if (type == 1) // look
    {
      player.Say("I see nothing special about it.");
    }
    else if (type == 2) // interact
    {
      player.Say("I can't do anything with it.");
    }
    else if (type == 3) // use inv on
    {
      player.Say("That won't do anything.");
    }
    else if (type == 4) // talk to
    {
      player.Say("I don't think it's going to talk back.");
    }
    else if (type == 7) // pick up
    {
      player.Say("I'm not sure I should be taking it.");
    }
  }
  else if (what == 2) // Unhandled events for OBJECTS
  {
    if (type == 0) // look
    {
      player.Say("Looks alright.");
    }
    else if (type == 1) // interact
    {
      player.Say("I'm not sure how to use it.");
    }
    else if (type == 2) // talk to
    {
      player.Say("I don't think it's going to answer me.");
    }
    else if (type == 3) // use inv on
    {
      player.Say("That's a funny idea.");
    }
    else if (type == 5) // pick up
    {
      player.Say("I don't want to have it.");
    }
  }
  else if (what == 3) // Unhandled events for CHARACTERS
  {
    if (type == 0) // look
    {
      player.Say("Hm.");
    }
    else if (type == 1) // interact
    {
      player.Say("Eh?");
    }
    else if (type == 2) // talk to
    {
      player.Say("Got nothing to say.");
    }
    else if (type == 3) // use inv on
    {
      player.Say("I don't think I should give that away.");
    }
    else if (type == 5) // pick up
    {
      player.Say("I'm not sure they would be compliant.");
    }
  }
  else if (what == 5) // Unhandled events for INVENTORY ITEMS
  {
    if (type == 0) // look
    {
      player.Say("It's just some junk in my inventory.");
    }
    else if (type == 1) // interact
    {
      player.Say("Er, no?");
    }
    else if (type == 3) // use inv on
    {
      player.Say("That's ridiculous.");
    }
  }
}

//=============================================================================
// Global interactions: Characters, Inventory items, ...
//=============================================================================

function cEgo_Look(Character *thisCharacter, CursorMode mode)
{
  Display("Damn, I'm looking good!");
}

function cEgo_Interact(Character *thisCharacter, CursorMode mode)
{
  Display("You rub your hands up and down your clothes.");
}

function cEgo_Talk(Character *thisCharacter, CursorMode mode)
{
  Display("Talking to yourself is a sign of madness!");
}

function cJAF_Talk(Character *theCharacter, CursorMode mode)
{
  cBigEgo.Walk(248, 196, eBlock,  eWalkableAreas);
  cBigEgo.Walk(275, 201, eBlock,  eWalkableAreas);
  dJAF.Start();
  JAF_task++;
}

function cTHF_Talk(Character *theCharacter, CursorMode mode)
{
  cEgo.Walk(211, 267, eBlock, eWalkableAreas);
  if(talked_to_tophat == 0){ 
  dTopHat1.Start();
  talked_to_tophat++;
}
  else if (talked_to_tophat ==1 && Talked_to_Evilfrog == 0){
  dTopHat2.Start();
  } else if(Talked_to_Evilfrog > 0 ){
    cTHF.Say("What do you want from me go give my brother his rock back");
  }
  
}

function iCocoNut1_UseInv(InventoryItem *theItem, CursorMode mode)
{
  if (cEgo.ActiveInventory == iCocoNut2){
    Display("2 COCO NUTS");
    player.LoseInventory(iCocoNut1);
    player.LoseInventory(iCocoNut2);
    cBigEgo.LoseInventory(iCocoNut2);
    cBigEgo.LoseInventory(iCocoNut1);
    player.AddInventory(iCocoNutTwo);
  }if (cEgo.ActiveInventory == iCocoNut3){
    Display("2 COCO NUTS");
    player.LoseInventory(iCocoNut1);
    player.LoseInventory(iCocoNut3);
    cBigEgo.LoseInventory(iCocoNut3);
    cBigEgo.LoseInventory(iCocoNut1);
    player.AddInventory(iCocoNutTwo);
  }if(cEgo.ActiveInventory == iCocoNutTwo){
    Display("3 COCO NUTS");
    player.LoseInventory(iCocoNut1);
    player.LoseInventory(iCocoNutTwo);
    cBigEgo.LoseInventory(iCocoNutTwo);
    cBigEgo.LoseInventory(iCocoNut1);
    player.AddInventory(iCocoNutThree);
  }
}
function iCocoNut2_UseInv(InventoryItem *theItem, CursorMode mode)
{
  if (cEgo.ActiveInventory == iCocoNut3){
    Display("2 COCO NUTS");
    player.LoseInventory(iCocoNut2);
    player.LoseInventory(iCocoNut3);
    cBigEgo.LoseInventory(iCocoNut2);
    cBigEgo.LoseInventory(iCocoNut3);
    player.AddInventory(iCocoNutTwo);
  }if (cEgo.ActiveInventory == iCocoNut1){
    Display("2 COCO NUTS");
    player.LoseInventory(iCocoNut2);
    player.LoseInventory(iCocoNut1);
    cBigEgo.LoseInventory(iCocoNut2);
    cBigEgo.LoseInventory(iCocoNut1);
    player.AddInventory(iCocoNutTwo);
  }if(cEgo.ActiveInventory == iCocoNutTwo){
    Display("3 COCO NUTS");
    player.LoseInventory(iCocoNut2);
    player.LoseInventory(iCocoNutTwo);
    cBigEgo.LoseInventory(iCocoNut2);
    cBigEgo.LoseInventory(iCocoNutTwo);
    player.AddInventory(iCocoNutThree);
  }
}
function iCocoNut3_UseInv(InventoryItem *theItem, CursorMode mode)
{
  if (cEgo.ActiveInventory == iCocoNut1){
    Display("2 COCO NUTS");
    player.LoseInventory(iCocoNut3);
    player.LoseInventory(iCocoNut1);
    cBigEgo.LoseInventory(iCocoNut3);
    cBigEgo.LoseInventory(iCocoNut1);
    player.AddInventory(iCocoNutTwo);
  }if (cEgo.ActiveInventory == iCocoNut2){
    Display("2 COCO NUTS");
    player.LoseInventory(iCocoNut3);
    player.LoseInventory(iCocoNut2);
    cBigEgo.LoseInventory(iCocoNut2);
    cBigEgo.LoseInventory(iCocoNut3);
    player.AddInventory(iCocoNutTwo);
  }if(cEgo.ActiveInventory == iCocoNutTwo){
    Display("3 COCO NUTS");
    player.LoseInventory(iCocoNut3);
    player.LoseInventory(iCocoNutTwo);
    cBigEgo.LoseInventory(iCocoNut3);
    cBigEgo.LoseInventory(iCocoNutTwo);
    player.AddInventory(iCocoNutThree);
  }
}

function iCocoNutTwo_UseInv(InventoryItem *theItem, CursorMode mode)
{
  if(cEgo.ActiveInventory == iCocoNut1){
    Display("3 COCO NUTS");
    player.LoseInventory(iCocoNut1);
    player.LoseInventory(iCocoNutTwo);
    cBigEgo.LoseInventory(iCocoNutTwo);
    cBigEgo.LoseInventory(iCocoNut1);
    player.AddInventory(iCocoNutThree);
  }if(cEgo.ActiveInventory == iCocoNut2){
    Display("3 COCO NUTS");
    player.LoseInventory(iCocoNut2);
    player.LoseInventory(iCocoNutTwo);
    cBigEgo.LoseInventory(iCocoNut2);
    cBigEgo.LoseInventory(iCocoNutTwo);
    player.AddInventory(iCocoNutThree);
  }if(cEgo.ActiveInventory == iCocoNut3){
    Display("3 COCO NUTS");
    player.LoseInventory(iCocoNut3);
    player.LoseInventory(iCocoNutTwo);
    cBigEgo.LoseInventory(iCocoNutTwo);
    cBigEgo.LoseInventory(iCocoNut3);
    player.AddInventory(iCocoNutThree);
  }
  
}

function iEngine_UseInv(InventoryItem *theItem, CursorMode mode)
{
  if(cEgo.ActiveInventory == iPiston1){
    Pistons_in_engine++;
    cEgo.LoseInventory(iPiston1);
    cBigEgo.LoseInventory(iPiston1);
  }if(cEgo.ActiveInventory == iPiston2){
    Pistons_in_engine++;
    cEgo.LoseInventory(iPiston2);
    cBigEgo.LoseInventory(iPiston2);
  }if(cEgo.ActiveInventory == iPiston3){
    Pistons_in_engine++;
    cEgo.LoseInventory(iPiston3);
    cBigEgo.LoseInventory(iPiston3);
  }if(cEgo.ActiveInventory == iPiston4){
    Pistons_in_engine++;
    cEgo.LoseInventory(iPiston4);
    cBigEgo.LoseInventory(iPiston4);
  }
}

function cTHF_UseInv(Character *theCharacter, CursorMode mode)
{
  cEgo.Walk(202, 279, eBlock, eWalkableAreas);
  if(cEgo.ActiveInventory == iCocoNut1 || cEgo.ActiveInventory == iCocoNut2 || cEgo.ActiveInventory == iCocoNut3){
    cTHF.Say("What you are going to give a man a single CoCoNut?");
  } 
  if(cEgo.ActiveInventory == iCocoNutTwo){
    cTHF.Say("Where is the thrid one i asked for");
  }
  if(cEgo.ActiveInventory == iCocoNutThree){
    cEgo.LoseInventory(iCocoNutThree);
    cBigEgo.LoseInventory(iCocoNutThree);
    Completed_Task++;
    dCOCONuts.Start();
    
  }  
  if (cEgo.ActiveInventory == iPaper){
    cEgo.LoseInventory(iPaper);
    cEgo.LoseInventory(iPaper);
    cEgo.LoseInventory(iPaper);
    cEgo.LoseInventory(iPaper);
    cBigEgo.LoseInventory(iPaper);
    cBigEgo.LoseInventory(iPaper);
    cBigEgo.LoseInventory(iPaper);
    cBigEgo.LoseInventory(iPaper);
    if(talked_to_tophat == 0){
      dTopHat1.Start();
      talked_to_tophat++;
    }
    if(talked_to_tophat == 1){
        dTopHatPaper.Start();
        Completed_Task++;
      }
  }
}
function iGideon_UseInv(Character *theCharacter, CursorMode mode){
  if(cEgo.ActiveInventory == iOrbe){
    Ai_Power++;
    Display("Hello, Good to see you agin Ego");
  }
  else{
    if (Ai_Power == 0){
    Display("Gideon can not use this item without power");
    }
  }
}
function iOrbe_UseInv(Character *theCharacter, CursorMode mode){
  if(cEgo.ActiveInventory == iGideon){
    Ai_Power++;
    Display("Hello, Good to see you agin Ego");
  }
  else{
    if (Ai_Power == 0){
    Display("Gideon can not use this item without power");
    }
  }
}

function cEvil_Frog_UseInv(Character *theCharacter, CursorMode mode)
{
  cEgo.Walk(342, 220, eBlock, eWalkableAreas);
  if (cEgo.ActiveInventory == iGideon && Talked_to_Evilfrog >= 1){
    if (Ai_Power > 0){
      cEvil_Frog.Say("Alright Now let me hook this up to my system");
      cEgo.Say("Ok I am going to need that back though");
      cEvil_Frog.Say("As long as it works you can go on your way with your orbe and all");
      Completed_Task++;
      giveAIEvil++;
    }else{
    cEgo.Say("I need the orbe first so I can give Gideon power");
    cEvil_Frog.Say("Ok but your not leaving till my computer is fixed");
    cEgo.AddInventory(iOrbe);
    cBigEgo.AddInventory(iOrbe);
    Talked_to_Evilfrog++;
    }
  }else {
    cEvil_Frog.Say("What is this I dont want it");
  }
}

function cEvil_Frog_Talk(Character *theCharacter, CursorMode mode)
{
  cEgo.Walk(342, 220, eBlock, eWalkableAreas);
  dEvil_Frog.Start();
  Talked_to_Evilfrog++;
}



function cJAF_UseInv(Character *theCharacter, CursorMode mode)
{
  if(cBigEgo.ActiveInventory == iDimond){
    cBigEgo.Walk(272, 196, eBlock, eWalkableAreas);
    Completed_Task++;
    cEgo.LoseInventory(iDimond);
    cBigEgo.LoseInventory(iDimond);
    cJAF.Say("Thank you so much this dimond is my most prized posession");
    cJAF.Say("I hope everything goes well with fixing your ship");
    cBigEgo.Say("Thank you, I hope so too");
  }
}

function cGidieon_Talk(Character *theCharacter, CursorMode mode)
{
  cEgo.Walk(222, 324, eBlock, eWalkableAreas);
  dGideon.Start();
  cEgo.AddInventory(iGideon);
  cBigEgo.AddInventory(iGideon);
  talked_to_gideon++;
}
